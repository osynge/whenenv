import os, os.path
import logging, logging.config
import sys
import subprocess
import datetime
import time
import optparse
def subphandling(cmd,timeout = 10):   
    log = logging.getLogger("sub")
    process = subprocess.Popen([cmd], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    processRc = None
    handleprocess = True
    counter = 0
    stdout = ''
    stderr = ''
    while handleprocess:
        counter += 1
        time.sleep(1)
        cout,cerr = process.communicate()
        stdout += cout
        stderr += stderr
        log.info(cout)
        log.warning(cerr)
        process.poll()
        processRc = process.returncode
        if processRc != None:
            break
        if counter == timeout:
            os.kill(process.pid, signal.SIGQUIT)
        if counter > timeout:
            os.kill(process.pid, signal.SIGKILL)
            processRc = -9
            break
    return (processRc,stdout,stderr)



def runJob (jobname):
    log = logging.getLogger("runJob")
    mappings = {
        "GenChroot.SL-6X" : ["transfer/GenChroot.SL-6X.sh"],
        "vmcatcher-scientific-6-prod" : ["transfer/vmcatcher-scientific-6-prod.sh"],
        "vmcatcher-scientific-6-trunk" : ["transfer/vmcatcher-scientific-6-trunk.sh"],
        "vmcatcher-scientific-6-trunk-test" :["transfer/vmcatcher-scientific-6-trunk-test.sh"],
        "vmcatcher-scientific-6-prod-test" : ["transfer/vmcatcher-scientific-6-prod-test.sh"],
        "vmcatcher-debian-wheezy-prod" :["transfer/chroot-debian-wheezy-buildup.sh",
            "transfer/vmcatcher-debian-wheezy-prod-part-02.sh",
            "transfer/vmcatcher-debian-wheezy-prod-part-03.sh",
            "transfer/chroot-debian-wheezy-teardown.sh"],
        "vmcatcher_eventHndlExpl_ON-scientific-6-prod" : ["transfer/vmcatcher_eventHndlExpl_ON-scientific-6-prod-part-01.sh",
            "transfer/vmcatcher_eventHndlExpl_ON-scientific-6-prod-part-02.sh"],
        "vmcatcher_eventHndlExpl_ON-scientific-6-trunk" : ["transfer/vmcatcher_eventHndlExpl_ON-scientific-6-trunk.sh"],
        "smimeX509validation-scientific-6-trunk" :["transfer/smimeX509validation-scientific-6-trunk-part-01.sh",
            "transfer/smimeX509validation-scientific-6-trunk-part-02.sh"],
        "smimeX509validation-scientific-6-prod" : ["transfer/smimeX509validation-scientific-6-prod-part-01.sh",
            "transfer/smimeX509validation-scientific-6-prod-part-02.sh"],
        "grid-virt-sort-scientific-6-prod" : [ "transfer/grid-virt-sort-scientific-6-prod.sh" ],
        "hepixvmitrust-scientific-6-prod" : [ "transfer/hepixvmitrust-scientific-6-prod.sh" ],
        "vmcaster-scientific-6-trunk" : [ "transfer/vmcaster-scientific-6-trunk-part-01.sh" ,
            "transfer/vmcaster-scientific-6-trunk-part-02.sh"],
        "dirvacua-scientific-6-trunk" : ["transfer/dirvacua-scientific-6-trunk.sh"],
        "smimeX509validation-debian-wheezy-prod" : ["transfer/chroot-debian-wheezy-buildup.sh",
            "transfer/chroot-debian-wheezy-freshen.sh",
            "transfer/smimeX509validation-debian-wheezy-prod-part-03.sh",
            "transfer/smimeX509validation-debian-wheezy-prod-part-04.sh",
            "transfer/chroot-debian-wheezy-teardown.sh"],
        "grid-virt-sort-debian-wheezy-prod" : ["transfer/chroot-debian-wheezy-buildup.sh",
            "transfer/chroot-debian-wheezy-freshen.sh",
            "transfer/grid-virt-sort-debian-wheezy-prod-part-02.sh",
            "transfer/grid-virt-sort-debian-wheezy-prod-part-03.sh",
            "transfer/chroot-debian-wheezy-teardown.sh"],
        "grid-virt-sort-debian-wheezy-prod-deb" : ["transfer/chroot-debian-wheezy-buildup.sh",
            "transfer/chroot-debian-wheezy-freshen.sh",
            "transfer/grid-virt-sort-debian-wheezy-prod-deb-dependencies.sh",
            "transfer/chroot-debian-wheezy-teardown.sh"],
        }
    if not jobname in mappings.keys():
        log.error("job is not mapped '%s' " % (jobname) )
        return 1
    for jobpart in mappings[jobname]:
        log.info("running jobpart '%s' " % (jobpart) )
        script = "%s/%s" % (os.path.dirname(os.path.realpath(__file__)),jobpart)
        cmd = ". %s" % (script)
        processRc,stdout,stderr = subphandling(cmd,timeout = 360)
        log.info(" '%s' " % (processRc) )
        if processRc != 0:
            log.error("cmd '%s' returned '%s'." % (cmd,processRc) )
            return processRc
    return 0
        
        




def main():
    reload(sys)
    sys.setdefaultencoding('utf-8')
    log = logging.getLogger("main")
    p = optparse.OptionParser(version = "%prog " + "0.0.1")
    p.add_option('--verbose', action ='count',help='Change global log level, increasing log output.', metavar='LOGFILE')
    p.add_option('--quiet', action ='count',help='Change global log level, decreasing log output.', metavar='LOGFILE')
    p.add_option('--log-config', action ='store',help='Logfile configuration file, (overrides command line).', metavar='LOGFILE')
    p.add_option('--logcfg', action ='store',help='Logfile configuration file.', metavar='LOGCFGFILE')
    
    options, arguments = p.parse_args()
    if options.logcfg:
        if os.path.isfile(str(options.logfile)):
            logging.config.fileConfig(options.logfile)
        else:
            logging.basicConfig(level=logging.INFO)
            log = logging.getLogger("main")
            log.error("Logfile configuration file '%s' was not found." % (options.logfile))
            sys.exit(1)
    else:
        logging.basicConfig(level=logging.INFO)
    outputDict = None
    logFile = None
    
    if 'VMCHNDL_ON_LOG_CONF' in os.environ:
        logFile = os.environ['VMCHNDL_ON_LOG_CONF']
    # Set up log file
    LoggingLevel = logging.WARNING
    LoggingLevelCounter = 2
    if options.verbose:
        LoggingLevelCounter = LoggingLevelCounter - options.verbose
        if options.verbose == 1:
            LoggingLevel = logging.INFO
        if options.verbose == 2:
            LoggingLevel = logging.DEBUG
    if options.quiet:
        LoggingLevelCounter = LoggingLevelCounter + options.quiet
    if LoggingLevelCounter <= 0:
        LoggingLevel = logging.DEBUG
    if LoggingLevelCounter == 1:
        LoggingLevel = logging.INFO
    if LoggingLevelCounter == 2:
        LoggingLevel = logging.WARNING
    if LoggingLevelCounter == 3:
        LoggingLevel = logging.ERROR
    if LoggingLevelCounter == 4:
        LoggingLevel = logging.FATAL
    if LoggingLevelCounter >= 5:
        LoggingLevel = logging.CRITICAL
    
    if options.log_config:
        logFile = options.log_config
    if logFile != None:
        if os.path.isfile(str(options.log_config)):
            logging.config.fileConfig(options.log_config)
        else:
            logging.basicConfig(level=LoggingLevel)
            log = logging.getLogger("main")
            log.error("Logfile configuration file '%s' was not found." % (options.log_config))
            sys.exit(1)
    else:
        logging.basicConfig(level=LoggingLevel)
    log = logging.getLogger("main")

    jobname = None
    if 'JOB_NAME' in os.environ:
        jobname=os.environ['JOB_NAME']
    else:
        log.error("No Enviroment variable set")
        sys.exit(2)
    log.info("JOB_NAME=%s" % jobname )
    
    rc = runJob(jobname)
    if rc != 0:
        log.error("runJob returned '%s'" % (rc) )
        sys.exit(2)
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    main()
